import type { ReactElement } from 'react'
import type { Context } from 'react-async-component'
import type { RawIndexMap, RawSourceMap } from 'source-map'

export type Callback<T> = (err: Error | null, res?: T) => void

// The render bundle can either be a string (single bundled file)
// or a bundle manifest object generated by ssr-webpack-plugin.
export interface RenderBundle {
  basedir?: string
  entry: string
  files: Record<string, string>
  maps: Record<string, RawIndexMap | RawSourceMap>
  modules?: Record<string, string[]>
}

export type RenderOptions = TemplateRendererOptions & {
  basedir?: string
  runInNewContext?: 'once' | false
}

export interface Renderer {
  renderToString?: (
    component: ReactElement,
    context: UserContext,
    cb: Callback<string>,
  ) => Promise<string>
  renderToStream: (
    component: ReactElement,
    context: UserContext,
  ) => NodeJS.ReadableStream
}

export interface UserContext {
  [key: string]: unknown
  asyncContext?: Context
  head?: string
  styles?: string
  getPreloadFiles?: (context: UserContext) => Resource[]
  url?: string
  _styles?: Record<string, string>
  _renderStyles?: (styles: Record<string, string>) => string
  _mappedFiles?: Resource[]
  _registeredComponents?: Set<string>
}

export interface TemplateRendererOptions {
  template?: string
  inject?: boolean
  clientManifest?: ClientManifest
  shouldPreload?: (file: string, type: string) => boolean
  shouldPrefetch?: (file: string, type: string) => boolean
}

export interface ClientManifest {
  publicPath: string
  all: string[]
  initial?: string[]
  async?: string[]
  modules: Partial<Record<string, number[]>>
  hasNoCssVersion?: Record<string, boolean>
}

export interface Resource {
  file: string
  extension: string
  fileWithoutQuery: string
  asType: string
}

export interface ParsedTemplate {
  head: (data: UserContext) => string
  neck: (data: UserContext) => string
  tail: (data: UserContext) => string
}

export type File = string | { name: string }

export type AsyncFileMapper = (files: string[]) => string[]

export type Module<T extends object = object> =
  | { exports: { default?: T } }
  | { exports: T }

export type EvaluateModule =
  | ReactElement
  | ((userContext: UserContext) => ReactElement)
